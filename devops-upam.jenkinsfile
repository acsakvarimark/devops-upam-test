pipeline {
    agent { 
        label params.TARGET_NODE 
    } 
		
	parameters {
		choice(name: 'target_node', choices: ['k8-master', 'k8-worker'], description: 'Jenkins node the pipeline runs on')
        string(name: 'new_username', defaultValue: 'pipelineuser', description: 'Username to create inside node')
        booleanParam(name: 'os_update', defaultValue: true, description: 'Check to enable OS update on node')
    }
    stages {
		stage('Fetch Repository') {
				steps {
					script {
						// Define default ws
						def workspaceDir = '/home/jenkins/devops-upam-test'
						
						sh """
						if [ -d "devops-upam-test/.git" ]; then
							cd devops-upam-test && git pull
							git reset --hard
							git clean -fd
							git pull
						else
							rm -rf devops-upam-test
							git clone https://github.com/acsakvarimark/devops-upam-test.git
						fi
						"""
					}
				}
			}
		stage('Setup tools') {
            steps {
                script {
                    sh """
                    sudo -u ${params.NEW_USER} bash ${WORKSPACE_DIR}/docker_setup.sh
                    """
				}
			}
		}
        stage('Run User Creation Playbook') {
            steps {
                script {
                    sh """
                    ansible-playbook -i inventory.yml user_creation.yml \
                    -e NEW_USER=${params.NEW_USER}
                    """
                }
            }
        }
        stage('Run OS Update Playbook') {
            steps {
                script {
                    def osUpdateFlag = params.OS_UPDATE ? "true" : "false"
                    sh """
                    ansible-playbook -i inventory.yml os_update.yml \
                    -e OS_UPDATE=${osUpdateFlag}
                    """
                }
            }
        }
		
    }
	post {
        always {
            // cleanup
            sh '/home/jenkins/devops-upam-test'
        }
    }
}
